Question	Answer	Source	Metadata	SuggestedQuestions	IsContextOnly	Prompts	QnaId
4. Destructuring	![Destructuring](https://i.imgur.com/eDY2iec.png)	Editorial		[]	false	[]	6
2. Classes	![Classes](https://i.imgur.com/dssBgCA.png)	Editorial		[]	false	[]	7
Hi	Hey! Welcome to React QnA bot. I have notes on the following topics:	Editorial		[]	false	[{"displayOrder":0,"qnaId":14,"displayText":"1. Review"},{"displayOrder":0,"qnaId":11,"displayText":"2. Next Gen JS"},{"displayOrder":0,"qnaId":24,"displayText":"3. Base Features & Syntax"},{"displayOrder":0,"qnaId":39,"displayText":"98. Random Facts"},{"displayOrder":0,"qnaId":33,"displayText":"99. Random Questions"},{"displayOrder":0,"qnaId":36,"displayText":"100. Algo & Data"}]	8
1. Exports and Imports	![Exports and Imports](https://i.imgur.com/ltMe2zC.png)	Editorial		[]	false	[]	9
3. Rest and Spread Operators	![Rest and Spread](https://i.imgur.com/ZemMw0C.png)	Editorial		[]	false	[]	10
2. Next Gen JS	Following topics are covered under Next Gen JS:	Editorial		[]	false	[{"displayOrder":0,"qnaId":9,"displayText":"1. Exports and Imports"},{"displayOrder":0,"qnaId":7,"displayText":"2. Classes"},{"displayOrder":0,"qnaId":10,"displayText":"3. Rest and Spread Operators"},{"displayOrder":0,"qnaId":6,"displayText":"4. Destructuring"}]	11
Things to remember	Topics as follow (Things to remember):	Editorial		[]	false	[]	12
1. Reference Types	Non-Primitive types, like Objects, are stored in memory and their identifiers simply point to that place place in memory. To copy over the properties use spread technique: ![spreadForImmutabilityInObjects](https://i.imgur.com/tsqT6sj.png)	Editorial		[]	false	[]	13
1. Review	Following topics are covered under Review Section:	Editorial		[]	false	[{"displayOrder":0,"qnaId":13,"displayText":"1. Reference Types"},{"displayOrder":0,"qnaId":16,"displayText":"2. All Array Functions"}]	14
2. All Array Functions	JavaScript array functions like `map()` , `filter()` , `reduce()` etc. can be beneficial since a lot of React concepts rely on working with arrays (in immutable ways). \n\nDocumentation links: \n[`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) [`findIndex()` ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)  [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=b) [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat?v=b) [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splicetest)\n\nClick for example code:	Editorial		[]	false	[{"displayOrder":0,"qnaId":17,"displayText":".map()"},{"displayOrder":0,"qnaId":18,"displayText":".find()"},{"displayOrder":0,"qnaId":19,"displayText":".findIndex()"},{"displayOrder":0,"qnaId":20,"displayText":".reduce()"},{"displayOrder":0,"qnaId":21,"displayText":".concat()"},{"displayOrder":0,"qnaId":22,"displayText":".slice()"},{"displayOrder":0,"qnaId":23,"displayText":".splice()"}]	16
.map()	```javascript\nvar array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n```	Editorial		[]	false	[]	17
.find()	```javascript\nvar array1 = [5, 12, 8, 130, 44];\n\nvar found = array1.find(function(element) {\n  return element > 10;\n});\n\nconsole.log(found);\n// expected output: 12\n```	Editorial		[]	false	[]	18
.findIndex()	```javascript\nvar array1 = [5, 12, 8, 130, 44];\n\nfunction isLargeNumber(element) {\n  return element > 13;\n}\n\nconsole.log(array1.findIndex(isLargeNumber));\n// expected output: 3\n```	Editorial		[]	false	[]	19
.reduce()	```javascript\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n```	Editorial		[]	false	[]	20
.concat()	```javascript\nvar array1 = ['a', 'b', 'c'];\nvar array2 = ['d', 'e', 'f'];\n\nconsole.log(array1.concat(array2));\n// expected output: Array ["a", "b", "c", "d", "e", "f"]\n```	Editorial		[]	false	[]	21
.slice()	```javascript\nvar animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\n\nconsole.log(animals.slice(2));\n// expected output: Array ["camel", "duck", "elephant"]\n\nconsole.log(animals.slice(2, 4));\n// expected output: Array ["camel", "duck"]\n\nconsole.log(animals.slice(1, 5));\n// expected output: Array ["bison", "camel", "duck", "elephant"]\n```	Editorial		[]	false	[]	22
.splice()	```javascript\nvar months = ['Jan', 'March', 'April', 'June'];\nmonths.splice(1, 0, 'Feb');\n// inserts at index 1\nconsole.log(months);\n// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']\n\nmonths.splice(4, 1, 'May');\n// replaces 1 element at index 4\nconsole.log(months);\n// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']\n```	Editorial		[]	false	[]	23
3. Base Features & Syntax	Following topics are covered under Base Features & Syntax Section:	Editorial		[]	false	[{"displayOrder":0,"qnaId":25,"displayText":"25. The Build WorkFlow"},{"displayOrder":0,"qnaId":26,"displayText":"26. Using Create React App"},{"displayOrder":0,"qnaId":27,"displayText":"27. Understanding the Folder Structure"},{"displayOrder":0,"qnaId":41,"displayText":"28. Understanding Component Basics"},{"displayOrder":0,"qnaId":42,"displayText":"29. Understanding JSX"},{"displayOrder":0,"qnaId":43,"displayText":"30. JSX Restrictions"},{"displayOrder":0,"qnaId":46,"displayText":"31. Creating a functional Component"},{"displayOrder":0,"qnaId":47,"displayText":"32. Components & JSX Cheat Sheet"},{"displayOrder":0,"qnaId":48,"displayText":"33. Working with Components & Re-Using Them"},{"displayOrder":0,"qnaId":49,"displayText":"34. Outputting Dynamic Content"},{"displayOrder":0,"qnaId":50,"displayText":"35. Working with Props"}]	24
25. The Build WorkFlow	![The Build WorkFlow](https://i.imgur.com/TNayWEt.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":26,"displayText":"26. Using Create React App"}]	25
26. Using Create React App	Steps:\n\n1. [Create-React-App GitHub](https://github.com/facebook/create-react-app)\n\n1. [Node.JS dl link](https://nodejs.org/en/)\n\n1. Following commands in console where you wish to create your first react project:\n\n```bash\n\nnpm install create-react-app -g\n\ncreate-react-app react-complete-guide --script-version 1.1.5\n\ncd react-complete-guide\n\nnpm start\n\n```	Editorial		[]	false	[{"displayOrder":0,"qnaId":27,"displayText":"27. Understanding the Folder Structure"}]	26
27. Understanding the Folder Structure	Understanding the Folder Structure	Editorial		[]	false	[{"displayOrder":0,"qnaId":28,"displayText":"1. Initial Folder Structure"},{"displayOrder":0,"qnaId":30,"displayText":"2. Remove `logo.svg`"},{"displayOrder":0,"qnaId":32,"displayText":"3. Initial `App.js`"},{"displayOrder":0,"qnaId":31,"displayText":"4. Initial `App.css`"},{"displayOrder":0,"qnaId":41,"displayText":"28. Understanding Component Basics"}]	27
1. Initial Folder Structure	![initial folder structure](https://i.imgur.com/JPzgjKJ.png)	Editorial		[]	false	[]	28
2. Remove `logo.svg`	Delete `logo.svg`	Editorial		[]	false	[]	30
4. Initial `App.css`	![Intial App.css](https://i.imgur.com/llTAA8g.png)	Editorial		[]	false	[]	31
3. Initial `App.js`	![initial app.js](https://i.imgur.com/259XHzO.png)	Editorial		[]	false	[]	32
99. Random Questions	Please select a question:	Editorial		[]	false	[{"displayOrder":0,"qnaId":34,"displayText":"Purpose of `React` and `{ Component }`"},{"displayOrder":0,"qnaId":35,"displayText":"Purpose of `render()` in Component sub-class"}]	33
Purpose of `React` and `{ Component }`	In `import React, { Component } from 'react;'`,\n`React` is responsible/required for rendering anything to DOM. `React` is always imported to a file where `component` class is used.	Editorial		[]	false	[]	34
Purpose of `render()` in Component sub-class	`render()` is called to render something to the screen.\n\nEvery React component must return some html code in `render()` to render it to the DOM (on the screen).	Editorial		[]	false	[]	35
100. Algo & Data	A&D categories:	Editorial		[]	false	[{"displayOrder":0,"qnaId":37,"displayText":"Ad-hoc"}]	36
Ad-hoc	Ad-hoc questions:	Editorial		[]	false	[{"displayOrder":0,"qnaId":38,"displayText":"pathInZigZagTree(label)"}]	37
pathInZigZagTree(label)	![pathInZigZagTree](https://i.imgur.com/pMmyuxS.png)	Editorial		[]	false	[]	38
98. Random Facts	Select one random fact:	Editorial		[]	false	[{"displayOrder":0,"qnaId":40,"displayText":"`className` instead of `class` in HTML attributes"},{"displayOrder":0,"qnaId":44,"displayText":"What is a `component`?"},{"displayOrder":0,"qnaId":45,"displayText":"Component name start with uppercase"}]	39
`className` instead of `class` in HTML attributes	![HTML className instead of class](https://i.imgur.com/87MH8b1.png)	Editorial		[]	false	[]	40
28. Understanding Component Basics	You should only create one base component, typically `App` inside which you must nest rest of your app.	Editorial		[]	false	[{"displayOrder":0,"qnaId":42,"displayText":"29. Understanding JSX"}]	41
29. Understanding JSX	![understanding JSX](https://i.imgur.com/6OtkKcI.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":43,"displayText":"30. JSX Restrictions"}]	42
30. JSX Restrictions	1. use `className` instead of `class` since `class` is a already a reserved keyword.\n1. Should return only 1 `DOM element` in a `React component`.	Editorial		[]	false	[{"displayOrder":0,"qnaId":46,"displayText":"31. Creating a functional Component"}]	43
What is a `component`?	In its simplest form, a `component` is a function returning some JSX.	Editorial		[]	false	[]	44
Component name start with uppercase	Component name must start with uppercase character. In react, in jsx, all elements starting with lowercase characters like `div` or `h1` are reserved for the native html elements.	Editorial		[]	false	[]	45
31. Creating a functional Component	Person Function:\n![Person function](https://i.imgur.com/K1OfRXH.png)\nPerson imported in App.js:\n![person used in app](https://i.imgur.com/EbUDaod.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":47,"displayText":"32. Components & JSX Cheat Sheet"}]	46
32. Components & JSX Cheat Sheet	![32. Components & JSX Cheat Sheet](https://i.imgur.com/DxNxji6.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":48,"displayText":"33. Working with Components & Re-Using Them"}]	47
33. Working with Components & Re-Using Them	[lecture link](https://www.udemy.com/react-the-complete-guide-incl-redux/learn/lecture/8090864#overview)\n\n~![33. Working with Components & Re-Using Them](https://i.imgur.com/oTqxKMg.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":49,"displayText":"34. Outputting Dynamic Content"}]	48
34. Outputting Dynamic Content	[34. Outputting Dynamic Content](https://www.udemy.com/react-the-complete-guide-incl-redux/learn/lecture/8090868#overview)\n\n![34. Outputting Dynamic Content](https://i.imgur.com/0f2OVX8.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":50,"displayText":"35. Working with Props"}]	49
35. Working with Props	[35. Working with Props](https://www.udemy.com/react-the-complete-guide-incl-redux/learn/lecture/8090870#overview)\n\n**Person.js:**\n![35. Working with Props](https://i.imgur.com/P1rutzN.png)\n\n**App.js**\n![app.js](https://i.imgur.com/OIUgbpW.png)	Editorial		[]	false	[{"displayOrder":0,"qnaId":51,"displayText":"36. Understanding the Children Property"}]	50
36. Understanding the Children Property	[36. Understanding the Children Property](https://www.udemy.com/react-the-complete-guide-incl-redux/learn/lecture/8090872#overview)	Editorial		[]	false	[]	51